services:
  postgres_database:
    container_name: postgres_database
    image: postgres:15.5
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data
      - ./tsl_manager_database/init-scripts/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    networks:
      - tsl_manager_network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=tsl_manager_database --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    container_name: tsl_manager_redis
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - tsl_manager_network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  tsl_manager_pgadmin:
    container_name: tsl_manager_pgadmin
    image: dpage/pgadmin4:8.6
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./tsl_manager_pgadmin/config_local.py:/pgadmin4/config_local.py:ro
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    env_file:
      - .env
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - tsl_manager_network
    restart: always

  tsl_manager_project:
    container_name: tsl_manager_project
    build: ./tsl_manager_project
    ports:
      - "9000:8000"
    volumes:
      - tsl_files:/code/tsl_manager_downloader
      - static:/code/static
      - media:/code/media
    environment:
      - USE_DOTENV=1
    env_file:
      - ./tsl_manager_project/.env
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - tsl_manager_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  tsl_manager_downloader:
    container_name: tsl_manager_downloader
    build: ./tsl_manager_downloader
    volumes:
      - logs:/app/logs
      - tsl_files:/app/tsl_downloads
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tsl_manager_network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "celery -A tasks inspect ping || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  tsl_manager_beat:
    container_name: tsl_manager_beat
    build: ./tsl_manager_downloader
    command: celery -A tasks beat --loglevel=info --schedule /app/celerybeat-data/schedule.db
    volumes:
      - beat_data:/app/celerybeat-data
    depends_on:
      redis:
        condition: service_healthy
      tsl_manager_downloader:
        condition: service_healthy
    networks:
      - tsl_manager_network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "ps aux | grep '[c]elery beat' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  flower:
    container_name: tsl_manager_flower
    build: ./tsl_manager_downloader
    command: celery -A celery_app:app flower --loglevel=debug --port=5555
#    command: celery --broker=redis://redis:6379/0 flower
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
      tsl_manager_downloader:
        condition: service_healthy
    networks:
      - tsl_manager_network
    restart: always

  tsl_manager_nginx:
    container_name: tsl_manager_nginx
    build: ./tsl_manager_nginx
    ports:
      - "8080:8080"
    volumes:
      - static:/static
      - media:/media
    depends_on:
      - tsl_manager_project
    networks:
      - tsl_manager_network
    restart: always

networks:
  tsl_manager_network:
    name: tsl_manager_network
    driver: bridge

volumes:
  static:
    name: static_volume
  media:
    name: media_volume
  tsl_files:
    name: tsl_files_volume
  logs:
    name: logs_volume
  database_data:
    name: database_data
  pgadmin_data:
    name: pgadmin_data
  beat_data:
    name: beat_data
