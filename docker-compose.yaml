services:
  postgres_database:
    container_name: postgres_database
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - database_data:/var/lib/postgresql/data
      - ./pgadmin/init-scripts/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=tsl_manager_database --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - tsl_manager_network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin_setup/servers.json
      - ./pgadmin/pgpass:/pgpass
      - ./pgadmin/entrypoint.sh:/docker-entrypoint-init.d/99-custom-entrypoint.sh
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_SERVER_MODE}
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=${PGADMIN_MASTER_PASSWORD_REQUIRED}
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - POSTGRES_PORT=${POSTGRES_PORT}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - ./pgadmin/.env
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - tsl_manager_network

  tsl_manager_project:
    container_name: tsl_manager_project
    build: ./tsl_manager_project
    restart: always
    ports:
      - "9000:8000"
    volumes:
      - tsl_files:/code/tsl_manager_downloader
      - static:/code/static
      - media:/code/media
    env_file:
      - ./tsl_manager_project/.env
    depends_on:
      postgres_database:
        condition: service_healthy
    networks:
      - tsl_manager_network

#  tsl_manager_downloader:
#    container_name: tsl_manager_downloader
#    build: ./tsl_manager_downloader
#    restart: always
#    volumes:
#      - ${LOG_DIRECTORY}:/app/logs
#      - tsl_files:/app/tsl_downloads
#    env_file:
#      - .env
#    depends_on:
#      postgres_database:
#        condition: service_healthy
#    networks:
#      - tsl_manager_network

  tsl_manager_nginx:
    container_name: tsl_manager_nginx
    build: ./tsl_manager_nginx
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - static:/static
      - media:/media
    depends_on:
      - tsl_manager_project
    networks:
      - tsl_manager_network

networks:
  tsl_manager_network:
    name: tsl_manager_network
    driver: bridge

volumes:
  static:
    name: static_volume
  media:
    name: media_volume
  tsl_files:
    name: tsl_files_volume
  database_data:
    name: database_data
  pgadmin_data:
    name: pgadmin_data
